# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import mafia_pb2 as mafia__pb2


class MafiaServerStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetRoomId = channel.unary_unary(
                '/MafiaServer/GetRoomId',
                request_serializer=mafia__pb2.request_room_id.SerializeToString,
                response_deserializer=mafia__pb2.reply_room_id.FromString,
                )
        self.SetUserName = channel.unary_unary(
                '/MafiaServer/SetUserName',
                request_serializer=mafia__pb2.request_to_join.SerializeToString,
                response_deserializer=mafia__pb2.reply_bool.FromString,
                )
        self.InformThatGameHasStarted = channel.unary_unary(
                '/MafiaServer/InformThatGameHasStarted',
                request_serializer=mafia__pb2.has_game_started.SerializeToString,
                response_deserializer=mafia__pb2.reply_bool.FromString,
                )
        self.GetUpdatesOnGameProcessFromServer = channel.unary_stream(
                '/MafiaServer/GetUpdatesOnGameProcessFromServer',
                request_serializer=mafia__pb2.request_updates.SerializeToString,
                response_deserializer=mafia__pb2.reply_event.FromString,
                )
        self.PrescribeRole = channel.unary_unary(
                '/MafiaServer/PrescribeRole',
                request_serializer=mafia__pb2.request_to_get_role.SerializeToString,
                response_deserializer=mafia__pb2.reply_str.FromString,
                )
        self.InformThatUserHasLeft = channel.unary_unary(
                '/MafiaServer/InformThatUserHasLeft',
                request_serializer=mafia__pb2.request_to_leave.SerializeToString,
                response_deserializer=mafia__pb2.empty_reply.FromString,
                )
        self.StartDay = channel.unary_unary(
                '/MafiaServer/StartDay',
                request_serializer=mafia__pb2.request_to_start_day.SerializeToString,
                response_deserializer=mafia__pb2.reply_int.FromString,
                )
        self.WantToEndDay = channel.unary_unary(
                '/MafiaServer/WantToEndDay',
                request_serializer=mafia__pb2.request_to_end_day.SerializeToString,
                response_deserializer=mafia__pb2.reply_int.FromString,
                )
        self.GetAliveUserNames = channel.unary_unary(
                '/MafiaServer/GetAliveUserNames',
                request_serializer=mafia__pb2.request_to_get_alive_users.SerializeToString,
                response_deserializer=mafia__pb2.reply_str.FromString,
                )
        self.KillPerson = channel.unary_unary(
                '/MafiaServer/KillPerson',
                request_serializer=mafia__pb2.request_to_kill.SerializeToString,
                response_deserializer=mafia__pb2.reply_bool.FromString,
                )
        self.WantToEndNight = channel.unary_unary(
                '/MafiaServer/WantToEndNight',
                request_serializer=mafia__pb2.request_to_end_night.SerializeToString,
                response_deserializer=mafia__pb2.reply_int.FromString,
                )
        self.StartNight = channel.unary_unary(
                '/MafiaServer/StartNight',
                request_serializer=mafia__pb2.request_to_start_night.SerializeToString,
                response_deserializer=mafia__pb2.reply_int.FromString,
                )
        self.CheckPerson = channel.unary_unary(
                '/MafiaServer/CheckPerson',
                request_serializer=mafia__pb2.request_to_check.SerializeToString,
                response_deserializer=mafia__pb2.reply_check.FromString,
                )
        self.RevealThatPersonIsMafia = channel.unary_unary(
                '/MafiaServer/RevealThatPersonIsMafia',
                request_serializer=mafia__pb2.request_to_publish.SerializeToString,
                response_deserializer=mafia__pb2.reply_bool.FromString,
                )
        self.ExecutePlayer = channel.unary_unary(
                '/MafiaServer/ExecutePlayer',
                request_serializer=mafia__pb2.request_to_execute.SerializeToString,
                response_deserializer=mafia__pb2.response_to_execute.FromString,
                )
        self.CheckIfGameIsFinished = channel.unary_unary(
                '/MafiaServer/CheckIfGameIsFinished',
                request_serializer=mafia__pb2.check_if_game_is_finished_request.SerializeToString,
                response_deserializer=mafia__pb2.check_if_game_is_finished_reply.FromString,
                )


class MafiaServerServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetRoomId(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetUserName(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def InformThatGameHasStarted(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetUpdatesOnGameProcessFromServer(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PrescribeRole(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def InformThatUserHasLeft(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StartDay(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def WantToEndDay(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAliveUserNames(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def KillPerson(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def WantToEndNight(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StartNight(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CheckPerson(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RevealThatPersonIsMafia(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ExecutePlayer(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CheckIfGameIsFinished(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MafiaServerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetRoomId': grpc.unary_unary_rpc_method_handler(
                    servicer.GetRoomId,
                    request_deserializer=mafia__pb2.request_room_id.FromString,
                    response_serializer=mafia__pb2.reply_room_id.SerializeToString,
            ),
            'SetUserName': grpc.unary_unary_rpc_method_handler(
                    servicer.SetUserName,
                    request_deserializer=mafia__pb2.request_to_join.FromString,
                    response_serializer=mafia__pb2.reply_bool.SerializeToString,
            ),
            'InformThatGameHasStarted': grpc.unary_unary_rpc_method_handler(
                    servicer.InformThatGameHasStarted,
                    request_deserializer=mafia__pb2.has_game_started.FromString,
                    response_serializer=mafia__pb2.reply_bool.SerializeToString,
            ),
            'GetUpdatesOnGameProcessFromServer': grpc.unary_stream_rpc_method_handler(
                    servicer.GetUpdatesOnGameProcessFromServer,
                    request_deserializer=mafia__pb2.request_updates.FromString,
                    response_serializer=mafia__pb2.reply_event.SerializeToString,
            ),
            'PrescribeRole': grpc.unary_unary_rpc_method_handler(
                    servicer.PrescribeRole,
                    request_deserializer=mafia__pb2.request_to_get_role.FromString,
                    response_serializer=mafia__pb2.reply_str.SerializeToString,
            ),
            'InformThatUserHasLeft': grpc.unary_unary_rpc_method_handler(
                    servicer.InformThatUserHasLeft,
                    request_deserializer=mafia__pb2.request_to_leave.FromString,
                    response_serializer=mafia__pb2.empty_reply.SerializeToString,
            ),
            'StartDay': grpc.unary_unary_rpc_method_handler(
                    servicer.StartDay,
                    request_deserializer=mafia__pb2.request_to_start_day.FromString,
                    response_serializer=mafia__pb2.reply_int.SerializeToString,
            ),
            'WantToEndDay': grpc.unary_unary_rpc_method_handler(
                    servicer.WantToEndDay,
                    request_deserializer=mafia__pb2.request_to_end_day.FromString,
                    response_serializer=mafia__pb2.reply_int.SerializeToString,
            ),
            'GetAliveUserNames': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAliveUserNames,
                    request_deserializer=mafia__pb2.request_to_get_alive_users.FromString,
                    response_serializer=mafia__pb2.reply_str.SerializeToString,
            ),
            'KillPerson': grpc.unary_unary_rpc_method_handler(
                    servicer.KillPerson,
                    request_deserializer=mafia__pb2.request_to_kill.FromString,
                    response_serializer=mafia__pb2.reply_bool.SerializeToString,
            ),
            'WantToEndNight': grpc.unary_unary_rpc_method_handler(
                    servicer.WantToEndNight,
                    request_deserializer=mafia__pb2.request_to_end_night.FromString,
                    response_serializer=mafia__pb2.reply_int.SerializeToString,
            ),
            'StartNight': grpc.unary_unary_rpc_method_handler(
                    servicer.StartNight,
                    request_deserializer=mafia__pb2.request_to_start_night.FromString,
                    response_serializer=mafia__pb2.reply_int.SerializeToString,
            ),
            'CheckPerson': grpc.unary_unary_rpc_method_handler(
                    servicer.CheckPerson,
                    request_deserializer=mafia__pb2.request_to_check.FromString,
                    response_serializer=mafia__pb2.reply_check.SerializeToString,
            ),
            'RevealThatPersonIsMafia': grpc.unary_unary_rpc_method_handler(
                    servicer.RevealThatPersonIsMafia,
                    request_deserializer=mafia__pb2.request_to_publish.FromString,
                    response_serializer=mafia__pb2.reply_bool.SerializeToString,
            ),
            'ExecutePlayer': grpc.unary_unary_rpc_method_handler(
                    servicer.ExecutePlayer,
                    request_deserializer=mafia__pb2.request_to_execute.FromString,
                    response_serializer=mafia__pb2.response_to_execute.SerializeToString,
            ),
            'CheckIfGameIsFinished': grpc.unary_unary_rpc_method_handler(
                    servicer.CheckIfGameIsFinished,
                    request_deserializer=mafia__pb2.check_if_game_is_finished_request.FromString,
                    response_serializer=mafia__pb2.check_if_game_is_finished_reply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'MafiaServer', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class MafiaServer(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetRoomId(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/MafiaServer/GetRoomId',
            mafia__pb2.request_room_id.SerializeToString,
            mafia__pb2.reply_room_id.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetUserName(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/MafiaServer/SetUserName',
            mafia__pb2.request_to_join.SerializeToString,
            mafia__pb2.reply_bool.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def InformThatGameHasStarted(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/MafiaServer/InformThatGameHasStarted',
            mafia__pb2.has_game_started.SerializeToString,
            mafia__pb2.reply_bool.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetUpdatesOnGameProcessFromServer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/MafiaServer/GetUpdatesOnGameProcessFromServer',
            mafia__pb2.request_updates.SerializeToString,
            mafia__pb2.reply_event.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def PrescribeRole(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/MafiaServer/PrescribeRole',
            mafia__pb2.request_to_get_role.SerializeToString,
            mafia__pb2.reply_str.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def InformThatUserHasLeft(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/MafiaServer/InformThatUserHasLeft',
            mafia__pb2.request_to_leave.SerializeToString,
            mafia__pb2.empty_reply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StartDay(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/MafiaServer/StartDay',
            mafia__pb2.request_to_start_day.SerializeToString,
            mafia__pb2.reply_int.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def WantToEndDay(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/MafiaServer/WantToEndDay',
            mafia__pb2.request_to_end_day.SerializeToString,
            mafia__pb2.reply_int.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetAliveUserNames(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/MafiaServer/GetAliveUserNames',
            mafia__pb2.request_to_get_alive_users.SerializeToString,
            mafia__pb2.reply_str.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def KillPerson(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/MafiaServer/KillPerson',
            mafia__pb2.request_to_kill.SerializeToString,
            mafia__pb2.reply_bool.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def WantToEndNight(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/MafiaServer/WantToEndNight',
            mafia__pb2.request_to_end_night.SerializeToString,
            mafia__pb2.reply_int.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StartNight(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/MafiaServer/StartNight',
            mafia__pb2.request_to_start_night.SerializeToString,
            mafia__pb2.reply_int.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CheckPerson(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/MafiaServer/CheckPerson',
            mafia__pb2.request_to_check.SerializeToString,
            mafia__pb2.reply_check.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RevealThatPersonIsMafia(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/MafiaServer/RevealThatPersonIsMafia',
            mafia__pb2.request_to_publish.SerializeToString,
            mafia__pb2.reply_bool.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ExecutePlayer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/MafiaServer/ExecutePlayer',
            mafia__pb2.request_to_execute.SerializeToString,
            mafia__pb2.response_to_execute.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CheckIfGameIsFinished(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/MafiaServer/CheckIfGameIsFinished',
            mafia__pb2.check_if_game_is_finished_request.SerializeToString,
            mafia__pb2.check_if_game_is_finished_reply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
